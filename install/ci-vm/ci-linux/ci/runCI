#!/bin/bash

# This script will run the test suite. It requires no parameters, but needs
# some files to be present on the system. These are:
# - file containing the URL to report to
# - git repository with the code to compile & run

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

if [ ! -f "$DIR/variables" ]; then
    # No variable file defined
    sudo shutdown -h now
fi

# Source variables
. "$DIR/variables"

# Add cargo to path
PATH="/root/.cargo/bin:$PATH"

# Check if required files & folders are present
if [ ! -f ${reportURLFile} ]; then
    # No report URL file defined
    sudo shutdown -h now
fi
if [ ! -d ${srcDir} ]; then
    # No source dir defined
    sudo shutdown -h now
fi

reportURL=$(cat ${reportURLFile})
userAgent="CCX/CI_BOT"
logFile="${reportFolder}/log.html"

# Functions for re-use in various stages of the test progress

# Post status to the server
function postStatus {
    echo "Posting ${1} - ${2} to the server:" >> "${logFile}"
    curl -s -A "${userAgent}" --data "type=progress&status=$1&message=$2" -w "\n" "${reportURL}" >> "${logFile}"
}

# Send the log file to the server so it can be used
function sendLogFile {
    echo "Sending log to the server:" >> "${logFile}"
    curl -s -A "${userAgent}" --form "type=logupload" --form "file=@${logFile}" -w "\n" "${reportURL}"
    sleep 5
}

# Exit script and post abort status
function haltAndCatchFire {
	postStatus "canceled" $1 >> "${logFile}"
	sendLogFile
	sudo shutdown -h now
}

# Fail when the exit status is not equal to 0
function executeCommand {
	#echo "$@"
	"$@" >> "${logFile}"
	local status=$?
	if [ ${status} -ne 0 ]; then
		haltAndCatchFire "" # No message needed as we post before anyway
	fi
}

# Truncate log in case there was anything left from a previous session
echo "" > "${logFile}"

postStatus "preparation" "Copy testsuite to local folder"
executeCommand cp -r ${suiteSrcDir}/* ${suiteDstDir}

postStatus "preparation" "Copy code to local folder"
executeCommand cp -r ${srcDir}/* ${dstDir}
executeCommand cd ${dstDir}

postStatus "building" "Compiling CCExtractor"
# Build CCExtractor using the cmake
executeCommand mkdir build
executeCommand cd build
cmake ../src/ -DWITH_RUST:BOOL=ON -DWITH_OCR=ON >> "${logFile}" 2>&1
make >> "${logFile}" 2>&1
# Check if build succeeded
if [ -x "ccextractor" ]; then
	chmod 700 ccextractor
	# Run testSuite
	postStatus "testing" "Running tests"
	executeCommand cd ${suiteDstDir}
	executeCommand ${tester} --entries "${testFile}" --executable "${dstDir}/build/ccextractor" --tempfolder "${tempFolder}" --timeout 3000 --reportfolder "${reportFolder}" --resultfolder "${resultFolder}" --samplefolder "${sampleFolder}" --method Server --url "${reportURL}"
	postStatus "completed" "Ran all tests"
	sendLogFile
	# Shut down
	sudo shutdown -h now
else
	haltAndCatchFire "build"
fi
